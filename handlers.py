"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≥–æ–ª–æ—Å, —Ñ–æ—Ç–æ, —Ñ–∞–π–ª—ã)
"""
import os
import whisper
from pydub import AudioSegment
from PyPDF2 import PdfReader
from typing import Optional
from database import Database
from gemini_client import GeminiClient
import config
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ FFmpeg
def _setup_ffmpeg_path():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ FFmpeg"""
    if config.FFMPEG_PATH and os.path.exists(config.FFMPEG_PATH):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ FFmpeg –¥–ª—è pydub
        AudioSegment.converter = config.FFMPEG_PATH
        AudioSegment.ffmpeg = config.FFMPEG_PATH
        AudioSegment.ffprobe = config.FFMPEG_PATH.replace('ffmpeg', 'ffprobe')
    else:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ FFmpeg –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        project_dir = os.path.dirname(os.path.abspath(__file__))
        possible_paths = [
            os.path.join(project_dir, 'ffmpeg', 'bin', 'ffmpeg.exe'),
            os.path.join(project_dir, 'ffmpeg.exe'),
            os.path.join(project_dir, 'ffmpeg-8.0', 'bin', 'ffmpeg.exe'),
            os.path.join(project_dir, 'ffmpeg-8.0', 'ffmpeg.exe'),
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                AudioSegment.converter = path
                AudioSegment.ffmpeg = path
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ffprobe
                ffprobe_path = path.replace('ffmpeg', 'ffprobe')
                if os.path.exists(ffprobe_path):
                    AudioSegment.ffprobe = ffprobe_path
                print(f"FFmpeg –Ω–∞–π–¥–µ–Ω: {path}")
                return
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π FFmpeg
        print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π FFmpeg (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ PATH)")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ –∫ FFmpeg –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_setup_ffmpeg_path()

class ContentHandlers:
    def __init__(self, db: Database, gemini_client: GeminiClient):
        self.db = db
        self.gemini = gemini_client
        self.whisper_model = None  # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper
    
    def _load_whisper_model(self):
        """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper"""
        if self.whisper_model is None:
            print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper...")
            self.whisper_model = whisper.load_model("base")
            print("–ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    async def handle_voice(self, voice_file_path: str, user_question: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            voice_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (.ogg)
            user_question: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        
        Returns:
            –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç –æ—Ç Gemini
        """
        try:
            # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
            self._load_whisper_model()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .ogg –≤ .wav –¥–ª—è Whisper
            audio = AudioSegment.from_ogg(voice_file_path)
            
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
                audio.export(tmp_file.name, format='wav')
                temp_wav_path = tmp_file.name
            
            try:
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
                result = self.whisper_model.transcribe(temp_wav_path)
                transcribed_text = result["text"]
                
                if not transcribed_text.strip():
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –µ–≥–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
                if user_question:
                    final_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {user_question}\n\n–¢–∞–∫–∂–µ –ø—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ:\n{transcribed_text}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                else:
                    final_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{transcribed_text}\n\n–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
                response = self.gemini.chat([{"role": "user", "content": final_prompt}])
                
                return f"üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {transcribed_text}\n\nüí¨ –û—Ç–≤–µ—Ç:\n{response}"
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_wav_path):
                    os.unlink(temp_wav_path)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
    
    async def handle_photo(self, photo_data: bytes, user_caption: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        
        Args:
            photo_data: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_caption: –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ–æ—Ç–æ
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Gemini Vision
        """
        try:
            question = user_caption if user_caption else "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏? –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
            response = self.gemini.analyze_image(photo_data, question)
            return f"üì∑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n{response}"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
    
    async def handle_pdf(self, pdf_path: str, user_question: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É PDF
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Gemini —Å –∞–Ω–∞–ª–∏–∑–æ–º PDF
        """
        try:
            reader = PdfReader(pdf_path)
            text_content = ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
            max_pages = 10  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
            for i, page in enumerate(reader.pages[:max_pages]):
                text_content += f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} ---\n"
                text_content += page.extract_text()
            
            if not text_content.strip():
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞."
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤)
            max_chars = 50000  # ~12k —Ç–æ–∫–µ–Ω–æ–≤
            if len(text_content) > max_chars:
                text_content = text_content[:max_chars] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞]"
            
            response = self.gemini.process_text_from_file(text_content, user_question)
            return f"üìÑ –ê–Ω–∞–ª–∏–∑ PDF —Ñ–∞–π–ª–∞:\n\n{response}"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞: {str(e)}"
    
    async def handle_text_file(self, file_path: str, user_question: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Gemini —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–∞–π–ª–∞
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            encodings = ['utf-8', 'windows-1251', 'cp1252', 'latin-1']
            text_content = None
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as f:
                        text_content = f.read()
                    break
                except UnicodeDecodeError:
                    continue
            
            if not text_content:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π)."
            
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            max_chars = 50000
            if len(text_content) > max_chars:
                text_content = text_content[:max_chars] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞]"
            
            response = self.gemini.process_text_from_file(text_content, user_question)
            return f"üìù –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:\n\n{response}"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
    
    async def handle_audio_file(self, audio_path: str, user_question: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ (MP3 –∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã)
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∞—É–¥–∏–æ
        
        Returns:
            –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç –æ—Ç Gemini
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –≥–æ–ª–æ—Å–∞
            self._load_whisper_model()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wav –¥–ª—è Whisper
            audio = AudioSegment.from_file(audio_path)
            
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
                audio.export(tmp_file.name, format='wav')
                temp_wav_path = tmp_file.name
            
            try:
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
                result = self.whisper_model.transcribe(temp_wav_path)
                transcribed_text = result["text"]
                
                if not transcribed_text.strip():
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ."
                
                if user_question:
                    final_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {user_question}\n\n–¢–∞–∫–∂–µ –ø—Ä–∏—Å–ª–∞–ª –∞—É–¥–∏–æ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ:\n{transcribed_text}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏–æ."
                else:
                    final_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∞—É–¥–∏–æ —Ñ–∞–π–ª. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{transcribed_text}\n\n–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                
                response = self.gemini.chat([{"role": "user", "content": final_prompt}])
                return f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∞—É–¥–∏–æ:\n{transcribed_text}\n\nüí¨ –û—Ç–≤–µ—Ç:\n{response}"
            finally:
                if os.path.exists(temp_wav_path):
                    os.unlink(temp_wav_path)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {str(e)}"

