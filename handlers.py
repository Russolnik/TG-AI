"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≥–æ–ª–æ—Å, —Ñ–æ—Ç–æ, —Ñ–∞–π–ª—ã)
"""
import os
from PyPDF2 import PdfReader
from typing import Optional, List, Dict
from database import Database
from gemini_client import GeminiClient
import config

class ContentHandlers:
    def __init__(self, db: Database, gemini_client: GeminiClient):
        self.db = db
        self.gemini = gemini_client
    
    async def handle_voice(self, voice_file_path: str, user_question: Optional[str] = None, chat_history: Optional[List[Dict]] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini
        
        Args:
            voice_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (.ogg)
            user_question: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            chat_history: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Gemini —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(voice_file_path)
            if file_size > config.MAX_FILE_SIZE:
                return f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {config.MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë)"
            
            # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            with open(voice_file_path, 'rb') as f:
                audio_data = f.read()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type = "audio/ogg"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Telegram –≥–æ–ª–æ—Å–æ–≤—ã—Ö
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
            # –û—Ç–≤–µ—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –æ—Ç–≤–µ—Ç, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
            response = self.gemini.analyze_audio(audio_data, mime_type, user_question, chat_history)
            
            return response
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
    
    async def handle_photo(self, photo_data: bytes, user_caption: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        
        Args:
            photo_data: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_caption: –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ–æ—Ç–æ
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Gemini Vision
        """
        try:
            question = user_caption if user_caption else "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏? –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
            response = self.gemini.analyze_image(photo_data, question)
            return f"üì∑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n{response}"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
    
    async def handle_pdf(self, pdf_path: str, user_question: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É PDF
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Gemini —Å –∞–Ω–∞–ª–∏–∑–æ–º PDF
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(pdf_path)
            if file_size > config.MAX_FILE_SIZE:
                return f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {config.MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë)"
            
            reader = PdfReader(pdf_path)
            text_content = ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
            max_pages = 10  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
            for i, page in enumerate(reader.pages[:max_pages]):
                text_content += f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} ---\n"
                text_content += page.extract_text()
            
            if not text_content.strip():
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞."
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤)
            max_chars = 50000  # ~12k —Ç–æ–∫–µ–Ω–æ–≤
            if len(text_content) > max_chars:
                text_content = text_content[:max_chars] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞]"
            
            response = self.gemini.process_text_from_file(text_content, user_question)
            return f"üìÑ –ê–Ω–∞–ª–∏–∑ PDF —Ñ–∞–π–ª–∞:\n\n{response}"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞: {str(e)}"
    
    async def handle_text_file(self, file_path: str, user_question: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Gemini —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–∞–π–ª–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(file_path)
            if file_size > config.MAX_FILE_SIZE:
                return f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {config.MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë)"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            encodings = ['utf-8', 'windows-1251', 'cp1252', 'latin-1']
            text_content = None
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as f:
                        text_content = f.read()
                    break
                except UnicodeDecodeError:
                    continue
            
            if not text_content:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π)."
            
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            max_chars = 50000
            if len(text_content) > max_chars:
                text_content = text_content[:max_chars] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞]"
            
            response = self.gemini.process_text_from_file(text_content, user_question)
            return f"üìù –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:\n\n{response}"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
    
    async def handle_audio_file(self, audio_path: str, user_question: Optional[str] = None) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Gemini
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∞—É–¥–∏–æ
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç Gemini —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(audio_path)
            if file_size > config.MAX_FILE_SIZE:
                return f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {config.MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë)"
            
            # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            with open(audio_path, 'rb') as f:
                audio_data = f.read()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            if audio_path.endswith('.mp3'):
                mime_type = "audio/mpeg"
            elif audio_path.endswith('.wav'):
                mime_type = "audio/wav"
            elif audio_path.endswith('.ogg'):
                mime_type = "audio/ogg"
            elif audio_path.endswith('.m4a'):
                mime_type = "audio/mp4"
            elif audio_path.endswith('.flac'):
                mime_type = "audio/flac"
            else:
                mime_type = "audio/mpeg"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
            response = self.gemini.analyze_audio(audio_data, mime_type, user_question)
            return f"üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω:\n\n{response}"
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {str(e)}"
    
    async def handle_generate_image(self, prompt: str, reference_image: Optional[bytes] = None) -> Optional[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Imagen
        
        Args:
            prompt: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            reference_image: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        Returns:
            –ë–∞–π—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            image_data = self.gemini.generate_image(prompt, reference_image)
            return image_data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

