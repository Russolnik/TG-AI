// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env (–¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
const DEFAULT_SUPABASE_URL = 'https://pyrkntwervbrursneynd.supabase.co';
const DEFAULT_SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB5cmtudHdlcnZicnVyc25leW5kIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE5MzI1NDksImV4cCI6MjA3NzUwODU0OX0.D1pSh-60JmROW6zh7g_kjnH1tDuYxWOC0DiSfo3oR4o'; // Anon public key (JWT —Ç–æ–∫–µ–Ω)

// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∑–∞—Ç–µ–º –∏–∑ localStorage, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function getSupabaseConfig() {
    // 1. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–æ—Ç–æ–º)
    const urlParams = new URLSearchParams(window.location.search);
    let supabaseUrl = urlParams.get('supabase_url');
    let supabaseKey = urlParams.get('supabase_key');
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã
    if (supabaseUrl) {
        supabaseUrl = decodeURIComponent(supabaseUrl);
    }
    if (supabaseKey) {
        supabaseKey = decodeURIComponent(supabaseKey);
    }
    
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase:');
    console.log('  URL –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', supabaseUrl ? (supabaseUrl.substring(0, 40) + '...') : 'NULL');
    console.log('  Key –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', supabaseKey ? 'SET (' + supabaseKey.length + ' —Å–∏–º–≤–æ–ª–æ–≤)' : 'NULL');
    
    // 2. –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ URL, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
    if (!supabaseUrl || !supabaseKey) {
        const stored = localStorage.getItem('supabase_config');
        if (stored) {
            try {
                const config = JSON.parse(stored);
                if (config.url && !supabaseUrl) {
                    supabaseUrl = config.url;
                    console.log('  ‚úÖ URL –Ω–∞–π–¥–µ–Ω –≤ localStorage');
                }
                if (config.key && !supabaseKey) {
                    supabaseKey = config.key;
                    console.log('  ‚úÖ Key –Ω–∞–π–¥–µ–Ω –≤ localStorage');
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ localStorage:', e);
            }
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
    if (supabaseUrl) {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        supabaseUrl = supabaseUrl.trim();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!supabaseUrl.startsWith('http://') && !supabaseUrl.startsWith('https://')) {
            console.warn('‚ö†Ô∏è SUPABASE_URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, –¥–æ–±–∞–≤–ª—è—é https://');
            supabaseUrl = 'https://' + supabaseUrl;
        }
        
        // –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ URL –µ—Å–ª–∏ –µ—Å—Ç—å
        if (supabaseUrl.endsWith('/')) {
            supabaseUrl = supabaseUrl.slice(0, -1);
        }
    }
    
    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–∑
    if (supabaseUrl && supabaseKey) {
        localStorage.setItem('supabase_config', JSON.stringify({
            url: supabaseUrl,
            key: supabaseKey
        }));
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
    }
    
    // 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if (!supabaseUrl || !supabaseKey || supabaseUrl.includes('YOUR_SUPABASE_URL')) {
        console.log('‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env');
        supabaseUrl = supabaseUrl && !supabaseUrl.includes('YOUR_SUPABASE_URL') ? supabaseUrl : DEFAULT_SUPABASE_URL;
        supabaseKey = supabaseKey && !supabaseKey.includes('YOUR_SUPABASE_ANON_KEY') ? supabaseKey : DEFAULT_SUPABASE_KEY;
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
    
    return { url: supabaseUrl, key: supabaseKey };
}

const { url: SUPABASE_URL, key: SUPABASE_ANON_KEY } = getSupabaseConfig();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram?.WebApp;
if (tg) {
    tg.ready();
    tg.expand();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–∫—É—é –∂–µ –ø—Ä–æ—Å—Ç—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∫–∞–∫ –≤ Python –±–æ—Ç–µ (database.py)
let supabase = null;
try {
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY || 
        SUPABASE_URL.includes('YOUR_SUPABASE_URL') || 
        SUPABASE_ANON_KEY.includes('YOUR_SUPABASE_ANON_KEY')) {
        console.warn('‚ö†Ô∏è Supabase –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∫–ª–∏–µ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
        // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–∞–∫ –≤ database.py)
        supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)');
        console.log('üì° URL:', SUPABASE_URL.substring(0, 40) + '...');
        console.log('üîë Key:', SUPABASE_ANON_KEY.substring(0, 20) + '... (–¥–ª–∏–Ω–∞: ' + SUPABASE_ANON_KEY.length + ')');
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase –∫–ª–∏–µ–Ω—Ç–∞:', error);
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        stack: error.stack
    });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUserId = null;
let chats = [];
let currentChatId = null;
let deleteChatId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Mini App...');
        console.log('üìç URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', window.location.search);
        console.log('üîë SUPABASE_URL:', SUPABASE_URL ? (SUPABASE_URL.substring(0, 30) + '...') : 'NULL');
        console.log('üîë SUPABASE_ANON_KEY:', SUPABASE_ANON_KEY ? (SUPABASE_ANON_KEY.substring(0, 20) + '...') : 'NULL');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase
        if (!SUPABASE_URL || !SUPABASE_ANON_KEY || 
            SUPABASE_URL.includes('YOUR_SUPABASE_URL') || 
            SUPABASE_ANON_KEY.includes('YOUR_SUPABASE_ANON_KEY')) {
            const errorMsg = 'Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SUPABASE_URL –∏ SUPABASE_ANON_KEY.';
            console.error('‚ùå', errorMsg);
            console.error('üìã –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:');
            console.error('  URL:', SUPABASE_URL);
            console.error('  Key:', SUPABASE_ANON_KEY ? 'SET' : 'MISSING');
            showError(errorMsg);
            return;
        }
        
        console.log('‚úÖ Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!supabase) {
            throw new Error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SUPABASE_URL –∏ SUPABASE_ANON_KEY.');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const initData = tg?.initDataUnsafe;
        if (initData && initData.user) {
            currentUserId = initData.user.id;
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userName = initData.user.first_name || initData.user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            const userNameEl = document.getElementById('userName');
            if (userNameEl) userNameEl.textContent = userName;
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
            const initials = userName.charAt(0).toUpperCase();
            const userInitialsEl = document.getElementById('userInitials');
            if (userInitialsEl) userInitialsEl.textContent = initials;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã
            await loadChats();
        } else {
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Telegram –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π ID
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                console.warn('Telegram WebApp data not available. Using test mode.');
                currentUserId = parseInt(localStorage.getItem('test_user_id') || '1');
                const userNameEl = document.getElementById('userName');
                if (userNameEl) userNameEl.textContent = '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                await loadChats();
            } else {
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }
});


// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
// –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ database.py get_user_chats()
async function loadChats() {
    try {
        showLoading();
        
        if (!currentUserId) {
            throw new Error('User ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        
        if (!supabase) {
            throw new Error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        // Python: response = self.client.table('chats').select('*').eq('user_id', telegram_id).order('created_at', desc=False).execute()
        // JS –≤–µ—Ä—Å–∏—è (–æ–¥–∏–Ω –≤ –æ–¥–∏–Ω):
        console.log('üì§ –ó–∞–ø—Ä–æ—Å –∫ Supabase:');
        console.log('  –¢–∞–±–ª–∏—Ü–∞: chats');
        console.log('  user_id:', currentUserId);
        console.log('  URL:', SUPABASE_URL);
        console.log('  Key (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):', SUPABASE_ANON_KEY.substring(0, 20));
        
        const response = await supabase
            .from('chats')
            .select('*')
            .eq('user_id', currentUserId)
            .order('created_at', { ascending: false }); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Supabase:');
        console.log('  Error:', response.error ? JSON.stringify(response.error, null, 2) : '–ù–µ—Ç');
        console.log('  Data:', response.data ? `${response.data.length} –∑–∞–ø–∏—Å–µ–π` : 'NULL');
        
        // Python: return response.data if response.data else []
        // JS –≤–µ—Ä—Å–∏—è (–æ–¥–∏–Ω –≤ –æ–¥–∏–Ω):
        if (response.error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', response.error);
            console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:');
            console.error('  –ö–æ–¥:', response.error.code);
            console.error('  –°–æ–æ–±—â–µ–Ω–∏–µ:', response.error.message);
            console.error('  –î–µ—Ç–∞–ª–∏:', response.error.details);
            console.error('  –ü–æ–¥—Å–∫–∞–∑–∫–∞:', response.error.hint);
            
            // –ï—Å–ª–∏ —ç—Ç–æ CORS –∏–ª–∏ —Å–µ—Ç—å
            if (response.error.message && response.error.message.includes('fetch')) {
                console.error('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –∏–ª–∏ CORS!');
                console.error('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
                console.error('  1. –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ SQL –º–∏–≥—Ä–∞—Ü–∏—è 004_disable_rls.sql –≤ Supabase Dashboard?');
                console.error('  2. –ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ CORS –≤ Supabase Dashboard ‚Üí Settings ‚Üí API?');
                console.error('  3. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Supabase —Å–µ—Ä–≤–µ—Ä?');
            }
            
            chats = [];
            throw new Error(`–û—à–∏–±–∫–∞ Supabase: ${response.error.message || JSON.stringify(response.error)}`);
        } else {
            chats = response.data || [];
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤:', chats.length);
            if (chats.length > 0) {
                console.log('üìã –ü–µ—Ä–≤—ã–π —á–∞—Ç:', chats[0]);
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ localStorage)
        const savedActiveChatId = localStorage.getItem('activeChatId');
        if (savedActiveChatId && chats.find(c => c.chat_id === savedActiveChatId)) {
            currentChatId = savedActiveChatId;
        } else if (chats.length > 0) {
            currentChatId = chats[0].chat_id;
        }
        
        renderChats();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', error);
        chats = [];
        showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏: ${error.message}`);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
function renderChats() {
    hideLoading();
    
    const floatingBtn = document.getElementById('floatingNewChatBtn');
    
    if (chats.length === 0) {
        document.getElementById('emptyState').style.display = 'block';
        document.getElementById('chatsList').style.display = 'none';
        if (floatingBtn) floatingBtn.style.display = 'none';
        return;
    }
    
    document.getElementById('emptyState').style.display = 'none';
    document.getElementById('chatsList').style.display = 'block';
    if (floatingBtn) floatingBtn.style.display = 'flex';
    
    const chatsList = document.getElementById('chatsList');
    chatsList.innerHTML = '';
    
    chats.forEach((chat, index) => {
        const chatElement = createChatElement(chat);
        chatElement.style.animationDelay = `${index * 0.05}s`;
        chatsList.appendChild(chatElement);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–∞—Ç–∞
function createChatElement(chat) {
    const div = document.createElement('div');
    div.className = `chat-item ${chat.chat_id === currentChatId ? 'active' : ''}`;
    div.onclick = () => switchChat(chat.chat_id);
    
    const chatInfo = document.createElement('div');
    chatInfo.className = 'chat-info';
    
    const title = document.createElement('div');
    title.className = 'chat-title';
    title.textContent = chat.title;
    
    const meta = document.createElement('div');
    meta.className = 'chat-meta';
    meta.textContent = formatDate(chat.created_at);
    
    chatInfo.appendChild(title);
    chatInfo.appendChild(meta);
    
    const actions = document.createElement('div');
    actions.className = 'chat-actions';
    
    const renameBtn = document.createElement('button');
    renameBtn.className = 'btn-icon';
    renameBtn.innerHTML = `<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
    </svg>`;
    renameBtn.onclick = (e) => {
        e.stopPropagation();
        openRenameModal(chat);
    };
    
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'btn-icon delete-btn';
    deleteBtn.innerHTML = `<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="3 6 5 6 21 6"></polyline>
        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
    </svg>`;
    deleteBtn.onclick = (e) => {
        e.stopPropagation();
        openDeleteModal(chat.chat_id);
    };
    
    actions.appendChild(deleteBtn);
    
    div.appendChild(chatInfo);
    div.appendChild(actions);
    
    return div;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
async function switchChat(chatId) {
    if (currentChatId === chatId) return;
    
    currentChatId = chatId;
    localStorage.setItem('activeChatId', chatId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    renderChats();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º Mini App –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –±–æ—Ç–∞
    if (tg) {
        tg.close();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
function createNewChat() {
    if (!currentUserId) {
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    const modalTitle = document.getElementById('modalTitle');
    const chatInput = document.getElementById('chatTitleInput');
    const submitBtn = document.getElementById('modalSubmitBtn');
    const modal = document.getElementById('modal');
    
    if (modalTitle) modalTitle.textContent = '–ù–æ–≤—ã–π —á–∞—Ç';
    if (chatInput) chatInput.value = '';
    if (submitBtn) submitBtn.textContent = '–°–æ–∑–¥–∞—Ç—å';
    if (modal) {
        modal.style.display = 'flex';
        setTimeout(() => {
            if (chatInput) chatInput.focus();
        }, 100);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    document.getElementById('modal').style.display = 'none';
    document.getElementById('chatTitleInput').value = '';
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
// –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ database.py create_chat()
async function submitModal() {
    const title = document.getElementById('chatTitleInput').value.trim();
    
    if (!title) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞');
        return;
    }
    
    if (!currentUserId || !supabase) {
        alert('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        return;
    }
    
    try {
        console.log('üì§ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞:');
        console.log('  user_id:', currentUserId);
        console.log('  title:', title);
        console.log('  URL:', SUPABASE_URL);
        
        // Python: response = self.client.table('chats').insert(data).execute()
        // Python: return response.data[0] if response.data else None
        const response = await supabase
            .from('chats')
            .insert({
                user_id: currentUserId,
                title: title
            })
            .select();
        
        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Supabase:');
        console.log('  Error:', response.error ? JSON.stringify(response.error, null, 2) : '–ù–µ—Ç');
        console.log('  Data:', response.data ? `${response.data.length} –∑–∞–ø–∏—Å–µ–π` : 'NULL');
        
        if (response.error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:', response.error);
            console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:');
            console.error('  –ö–æ–¥:', response.error.code);
            console.error('  –°–æ–æ–±—â–µ–Ω–∏–µ:', response.error.message);
            console.error('  –î–µ—Ç–∞–ª–∏:', response.error.details);
            console.error('  –ü–æ–¥—Å–∫–∞–∑–∫–∞:', response.error.hint);
            
            // –ï—Å–ª–∏ —ç—Ç–æ CORS –∏–ª–∏ —Å–µ—Ç—å
            if (response.error.message && (response.error.message.includes('fetch') || response.error.message.includes('Failed'))) {
                console.error('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –∏–ª–∏ CORS!');
                console.error('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
                console.error('  1. –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ SQL –º–∏–≥—Ä–∞—Ü–∏—è 004_disable_rls.sql –≤ Supabase Dashboard?');
                console.error('  2. –ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ CORS –≤ Supabase Dashboard ‚Üí Settings ‚Üí API?');
                console.error('  3. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Supabase —Å–µ—Ä–≤–µ—Ä?');
            }
            
            throw response.error;
        }
        
        // Python: return response.data[0] if response.data else None
        if (response.data && response.data.length > 0) {
            const newChat = response.data[0];
            console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', newChat);
            chats.unshift(newChat);
            currentChatId = newChat.chat_id;
            localStorage.setItem('activeChatId', currentChatId);
            renderChats();
            closeModal();
        } else {
            throw new Error('–ß–∞—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω - –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:', error);
        console.error('üìã –¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name);
        console.error('üìã –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        console.error('üìã Stack:', error.stack);
        
        let errorMsg = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç';
        if (error.message && error.message.includes('fetch')) {
            errorMsg += '. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –∏ RLS –≤ Supabase Dashboard.';
        } else {
            errorMsg += ': ' + (error.message || JSON.stringify(error));
        }
        
        alert(errorMsg);
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
function openDeleteModal(chatId) {
    deleteChatId = chatId;
    document.getElementById('deleteModal').style.display = 'flex';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
function closeDeleteModal() {
    document.getElementById('deleteModal').style.display = 'none';
    deleteChatId = null;
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
async function confirmDelete() {
    if (!deleteChatId) return;
    
    try {
        const { error } = await supabase
            .from('chats')
            .delete()
            .eq('chat_id', deleteChatId);
        
        if (error) throw error;
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        chats = chats.filter(c => c.chat_id !== deleteChatId);
        
        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç, –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–æ–π
        if (currentChatId === deleteChatId) {
            if (chats.length > 0) {
                currentChatId = chats[0].chat_id;
                localStorage.setItem('activeChatId', currentChatId);
            } else {
                currentChatId = null;
                localStorage.removeItem('activeChatId');
            }
        }
        
        closeDeleteModal();
        renderChats();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç: ' + error.message);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoading() {
    document.getElementById('loading').style.display = 'flex';
    document.getElementById('chatsList').style.display = 'none';
    document.getElementById('emptyState').style.display = 'none';
    document.getElementById('error').style.display = 'none';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
}

function showError(message) {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('error').style.display = 'block';
    document.getElementById('error').querySelector('p').textContent = message;
    document.getElementById('chatsList').style.display = 'none';
    document.getElementById('emptyState').style.display = 'none';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 60000) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;
    if (diff < 604800000) return `${Math.floor(diff / 86400000)} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
document.getElementById('chatTitleInput')?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        submitModal();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
document.getElementById('newChatBtn')?.addEventListener('click', createNewChat);
