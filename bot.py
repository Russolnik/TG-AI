"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞
"""
import logging
import asyncio
from flask import Flask
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
import re
import config
from database import Database
from api_key_manager import APIKeyManager
from gemini_client import GeminiClient
from handlers import ContentHandlers
from uuid import UUID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
db = Database()
key_manager = APIKeyManager(db)
handlers = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

def get_handlers_for_user(telegram_id: int) -> ContentHandlers:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ API-–∫–ª—é—á–æ–º –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é"""
    global handlers
    
    api_key = key_manager.get_user_api_key(telegram_id)
    if not api_key:
        raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    model_name = db.get_user_model(telegram_id)
    
    gemini = GeminiClient(api_key, model_name)
    return ContentHandlers(db, gemini)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_id = update.effective_user.id
    
    try:
        key_id, api_key, status = key_manager.assign_key_to_user(telegram_id)
        
        if status == "limit_exceeded":
            await update.message.reply_text(
                "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å—á–µ—Ä–ø–∞–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        elif status == "existing_user":
            welcome_msg = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"
                "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ Gemini.\n\n"
                "–ß—Ç–æ —è —É–º–µ—é:\n"
                "‚Ä¢ üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç\n"
                "‚Ä¢ üéôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ üì∑ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
                "‚Ä¢ üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (PDF, TXT, –∞—É–¥–∏–æ) –¥–æ 200 –ú–ë\n\n"
                "üí° **–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ —Å–µ–±–µ!**\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö "
                "–∏–ª–∏ –∂–µ–ª–∞–µ–º–æ–º —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞!"
            )
        else:
            welcome_msg = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ Gemini.\n\n"
                "–ß—Ç–æ —è —É–º–µ—é:\n"
                "‚Ä¢ üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç\n"
                "‚Ä¢ üéôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ üì∑ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
                "‚Ä¢ üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (PDF, TXT, –∞—É–¥–∏–æ) –¥–æ 200 –ú–ë\n\n"
                "üí° **–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ —Å–µ–±–µ!**\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, "
                "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏–ª–∏ –∂–µ–ª–∞–µ–º–æ–º —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—Å "
                "–∏ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞!"
            )
        
        await update.message.reply_text(welcome_msg)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await setup_main_menu(update.message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI"""
    telegram_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_model = db.get_user_model(telegram_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        keyboard = []
        for model_key, model_info in config.GEMINI_MODELS.items():
            if model_info['available']:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                prefix = "‚úÖ " if model_key == current_model else ""
                button_text = f"{prefix}{model_info['display_name']}"
                keyboard.append([InlineKeyboardButton(
                    button_text,
                    callback_data=f"model_{model_key}"
                )])
            else:
                # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
                button_text = f"üîí {model_info['display_name']}"
                keyboard.append([InlineKeyboardButton(
                    button_text,
                    callback_data="model_locked"
                )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        current_model_info = config.GEMINI_MODELS.get(
            current_model,
            config.GEMINI_MODELS[config.DEFAULT_MODEL]
        )
        
        message_text = (
            f"ü§ñ **–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI**\n\n"
            f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{current_model_info['display_name']}**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
        )
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /model: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π."
        )

async def model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    
    try:
        callback_data = query.data
        
        if callback_data == "model_locked":
            await query.edit_message_text(
                "üîí –≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Google AI Pro.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏: Gemini 2.5 Flash –∏–ª–∏ Gemini 1.5 Flash."
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –º–æ–¥–µ–ª–∏ –∏–∑ callback_data
        if callback_data.startswith("model_"):
            model_key = callback_data.replace("model_", "")
            
            if model_key not in config.GEMINI_MODELS:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.")
                return
            
            model_info = config.GEMINI_MODELS[model_key]
            
            if not model_info['available']:
                await query.edit_message_text(
                    "üîí –≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.update_user_model(telegram_id, model_key)
            
            await query.edit_message_text(
                f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ **{model_info['display_name']}**\n\n"
                f"–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
                parse_mode=ParseMode.MARKDOWN
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –º–æ–¥–µ–ª–∏: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏."
        )

async def params_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /params - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        parameters = db.get_user_parameters(telegram_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ profile)
        if parameters:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ profile –ø–∞—Ä–∞–º–µ—Ç—Ä (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç)
            params_text = parameters.get('profile', '')
            if not params_text:
                # –ï—Å–ª–∏ profile –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                params_text = " ".join([f"{key}: {value}" for key, value in parameters.items()])
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 40 —Å–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            words = params_text.split()
            if len(words) > 40:
                params_text = " ".join(words[:40]) + "..."
            message_text = f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_text}"
        else:
            message_text = "–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        
        # –¢–æ–ª—å–∫–æ 2 –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="param_edit")],
        ]
        
        if parameters:
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="param_clear_all")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /params: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
        )

async def params_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    
    try:
        callback_data = query.data
        
        if callback_data == "param_edit":
            parameters = db.get_user_parameters(telegram_id)
            current_text = ""
            if parameters:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ profile
                params_text = parameters.get('profile', '')
                if not params_text:
                    params_text = " ".join([f"{key}: {value}" for key, value in parameters.items()])
                
                words = params_text.split()
                if len(words) > 40:
                    params_text = " ".join(words[:40]) + "..."
                current_text = f"\n\n–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_text}"
            
            keyboard = [
                [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="param_save")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="param_cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º (–¥–æ 40 —Å–ª–æ–≤).{current_text}\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—Ä—É—é—â–∏–π, 25 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∞ —Å–ø–æ—Ä—Ç",
                reply_markup=reply_markup
            )
            context.user_data['waiting_for_param'] = True
            return
        
        elif callback_data == "param_save":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            param_text = context.user_data.get('param_text', '')
            if param_text:
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                existing_params = db.get_user_parameters(telegram_id)
                existing_text = existing_params.get('profile', '')
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                if existing_text:
                    combined_text = f"{existing_text} {param_text}"
                else:
                    combined_text = param_text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                words = combined_text.split()
                word_count = len(words)
                
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 40 —Å–ª–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                if word_count > 40:
                    warning_msg = f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç {word_count} —Å–ª–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 40). –ü–æ—Å–ª–µ–¥–Ω–∏–µ {word_count - 40} —Å–ª–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.\n\n"
                else:
                    warning_msg = ""
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 40 —Å–ª–æ–≤ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç
                if word_count > 40:
                    combined_text = " ".join(words[:40])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                db.set_user_parameter(telegram_id, "profile", combined_text)
                context.user_data['waiting_for_param'] = None
                context.user_data['param_text'] = None
                
                # –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                asyncio.create_task(warmup_gemini_with_params(telegram_id, combined_text))
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await params_command_callback(query, telegram_id)
                
                if warning_msg:
                    await query.answer(warning_msg, show_alert=True)
            else:
                await query.edit_message_text("‚ùå –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–Ω–∞—á–∞–ª–∞.")
            return
        
        elif callback_data == "param_cancel":
            context.user_data['waiting_for_param'] = None
            context.user_data['param_text'] = None
            await params_command_callback(query, telegram_id)
            return
        
        elif callback_data == "param_clear_all":
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞", callback_data="param_confirm_clear")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="param_cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
                reply_markup=reply_markup
            )
            return
        
        elif callback_data == "param_confirm_clear":
            db.clear_user_parameters(telegram_id)
            await query.edit_message_text("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–¥–∞–ª–µ–Ω—ã.")
            return
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def setup_main_menu(message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("ü§ñ –ú–æ–¥–µ–ª—å"), KeyboardButton("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")],
        [KeyboardButton("‚ûï –ù–æ–≤—ã–π —á–∞—Ç")],
        [KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await message.reply_text(
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )

def get_active_chat_for_user(telegram_id: int, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π)
    
    Returns:
        tuple: (chat_id: UUID, chat: Dict) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    chat = db.get_user_active_chat(telegram_id)
    if not chat:
        chat = db.create_chat(telegram_id, "–ß–∞—Ç 1")
    
    if chat:
        return UUID(chat['chat_id']), chat
    
    return None, None

async def handle_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    text = update.message.text
    telegram_id = update.effective_user.id
    
    if text == "ü§ñ –ú–æ–¥–µ–ª—å":
        await model_command(update, context)
    elif text == "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã":
        await params_command(update, context)
    elif text == "‚ûï –ù–æ–≤—ã–π —á–∞—Ç":
        await new_chat_command(update, context)
    elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        await about_project_command(update, context)

async def new_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    telegram_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        user_chats = db.get_user_chats(telegram_id)
        chat_number = len(user_chats) + 1
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        new_chat = db.create_chat(telegram_id, f"–ß–∞—Ç {chat_number}")
        
        if new_chat:
            await update.message.reply_text(
                f"‚úÖ **–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞.")

async def about_project_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û –ø—Ä–æ–µ–∫—Ç–µ" - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Mini App"""
    try:
        mini_app_url = config.MINI_APP_URL
        if not mini_app_url or mini_app_url == "https://your-app.netlify.app":
            await update.message.reply_text(
                "‚ÑπÔ∏è **–û –ø—Ä–æ–µ–∫—Ç–µ**\n\n"
                "AI Assistant ‚Äî Telegram-–±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Google Gemini API.\n\n"
                "–ß—Ç–æ —è —É–º–µ—é:\n"
                "‚Ä¢ üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç\n"
                "‚Ä¢ üéôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ üì∑ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
                "‚Ä¢ üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (PDF, TXT, –∞—É–¥–∏–æ)\n\n"
                "üìû –°–≤—è–∑—å: @rusolnik\n\n"
                "üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: @rusolnik",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", web_app={"url": mini_app_url})]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ÑπÔ∏è **–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É \"–û –ø—Ä–æ–µ–∫—Ç–µ\"**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ, "
            "–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ '–û –ø—Ä–æ–µ–∫—Ç–µ': {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

async def delete_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    telegram_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        chat = db.get_user_active_chat(telegram_id)
        
        if not chat:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        chat_id = UUID(chat['chat_id'])
        chat_title = chat.get('title', '–ß–∞—Ç')
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="chat_delete_confirm"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="chat_delete_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∞—Ç **{chat_title}**?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['pending_delete_chat_id'] = str(chat_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞.")

async def chat_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    
    try:
        callback_data = query.data
        
        if callback_data == "chat_delete_confirm":
            chat_id_str = context.user_data.get('pending_delete_chat_id')
            if not chat_id_str:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            chat_id = UUID(chat_id_str)
            
            # –£–¥–∞–ª—è–µ–º —á–∞—Ç (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            if db.delete_chat(chat_id):
                context.user_data['pending_delete_chat_id'] = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —á–∞—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_chats = db.get_user_chats(telegram_id)
                if user_chats:
                    # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç –∞–∫—Ç–∏–≤–Ω—ã–º (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π)
                    new_active_chat = sorted(user_chats, key=lambda x: x['created_at'], reverse=True)[0]
                    await query.edit_message_text(
                        f"‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω!\n\n"
                        f"–ê–∫—Ç–∏–≤–Ω—ã–º —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Ç: **{new_active_chat.get('title', '–ß–∞—Ç')}**",
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö
                    new_chat = db.create_chat(telegram_id, "–ß–∞—Ç 1")
                    await query.edit_message_text(
                        f"‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω!\n\n"
                        f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
                        parse_mode=ParseMode.MARKDOWN
                    )
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç.")
                
        elif callback_data == "chat_delete_cancel":
            context.user_data['pending_delete_chat_id'] = None
            await query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

def format_response_for_telegram(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è Telegram —Å —Ç–æ—á–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Gemini
    –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    """
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    
    # –ó–∞–º–µ–Ω—è–µ–º Markdown —Å—Å—ã–ª–∫–∏ –Ω–∞ HTML —Å –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–º —Å—Ç–∏–ª–µ–º
    # –§–æ—Ä–º–∞—Ç: [—Ç–µ–∫—Å—Ç](url) -> <a href="url">—Ç–µ–∫—Å—Ç</a>
    def replace_link(match):
        link_text = match.group(1).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        link_url = match.group(2)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
        if not link_url.startswith(('http://', 'https://')):
            return match.group(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ, –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π URL
        return f'<a href="{link_url}">{link_text}</a>'
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Markdown —Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url) - –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    text = re.sub(r'\[([^\]]*)\]\(([^)]*)\)', replace_link, text)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML
    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **—Ç–µ–∫—Å—Ç** -> <b>—Ç–µ–∫—Å—Ç</b> (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ **)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø–∞—Ä–Ω–æ
    parts = text.split('**')
    result_parts = []
    for i, part in enumerate(parts):
        if i % 2 == 0:
            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å–∏–≤ –∏ –∫–æ–¥
            # –ö—É—Ä—Å–∏–≤ *—Ç–µ–∫—Å—Ç* -> <i>—Ç–µ–∫—Å—Ç</i> (–Ω–æ –Ω–µ –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å **)
            part = re.sub(r'(?<!\*)\*([^*]+?)\*(?!\*)', r'<i>\1</i>', part)
            # –ö–æ–¥ `—Ç–µ–∫—Å—Ç` -> <code>—Ç–µ–∫—Å—Ç</code>
            part = re.sub(r'`([^`]+)`', r'<code>\1</code>', part)
            result_parts.append(part)
        else:
            # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            result_parts.append(f'<b>{part}</b>')
    text = ''.join(result_parts)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –±–ª–æ–∫–∏ ```—Ç–µ–∫—Å—Ç``` -> <pre><code>—Ç–µ–∫—Å—Ç</code></pre>
    text = re.sub(r'```([^`]+)```', r'<pre><code>\1</code></pre>', text)
    
    return text

async def safe_send_message(update: Update, text: str, max_length: int = 4096):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if not text:
        return
    
    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    try:
        formatted = format_response_for_telegram(text)
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(formatted) > max_length:
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏–ª–∏ –∞–±–∑–∞—Ü–∞–º
            parts = []
            current_part = ""
            for line in formatted.split('\n'):
                if len(current_part) + len(line) + 1 > max_length and current_part:
                    parts.append(current_part)
                    current_part = line
                else:
                    current_part += ('\n' if current_part else '') + line
            if current_part:
                parts.append(current_part)
            
            for part in parts:
                await update.message.reply_text(part, parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text(formatted, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        try:
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏–≤–∞—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(text) > max_length:
                parts = []
                current_part = ""
                for line in text.split('\n'):
                    if len(current_part) + len(line) + 1 > max_length and current_part:
                        parts.append(current_part)
                        current_part = line
                    else:
                        current_part += ('\n' if current_part else '') + line
                if current_part:
                    parts.append(current_part)
                
                for part in parts:
                    await update.message.reply_text(part)
            else:
                await update.message.reply_text(text)
        except Exception as e2:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")

async def warmup_gemini_with_params(telegram_id: int, param_text: str):
    """
    –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–≤–∏–¥–∏–º–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á –∏ –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        api_key = key_manager.get_user_api_key(telegram_id)
        if not api_key:
            return
        
        model_name = db.get_user_model(telegram_id)
        gemini = GeminiClient(api_key, model_name)
        
        # –î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è "—Ä–∞–∑–æ–≥—Ä–µ–≤–∞"
        warmup_message = f"[–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {param_text}]\n\n–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        response = gemini.chat([{"role": "user", "content": warmup_message}])
        logger.info(f"–§–æ–Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —ç—Ç–æ —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å

async def params_command_callback(query, telegram_id: int):
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ callback"""
    parameters = db.get_user_parameters(telegram_id)
    
    if parameters:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ profile –ø–∞—Ä–∞–º–µ—Ç—Ä (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç)
        params_text = parameters.get('profile', '')
        if not params_text:
            # –ï—Å–ª–∏ profile –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params_text = " ".join([f"{key}: {value}" for key, value in parameters.items()])
        
        words = params_text.split()
        if len(words) > 40:
            params_text = " ".join(words[:40]) + "..."
        message_text = f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_text}"
    else:
        message_text = "–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="param_edit")],
    ]
    
    if parameters:
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="param_clear_all")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    telegram_id = update.effective_user.id
    user_text = update.message.text
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if context.user_data.get('waiting_for_param'):
            param_text = user_text.strip()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            existing_params = db.get_user_parameters(update.effective_user.id)
            existing_text = existing_params.get('profile', '')
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            if existing_text:
                preview_text = f"{existing_text} {param_text}"
            else:
                preview_text = param_text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            words = preview_text.split()
            word_count = len(words)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 40, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
            warning = ""
            if word_count > 40:
                warning = f"\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç {word_count} —Å–ª–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 40). –õ–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –æ–±—Ä–µ–∑–∞–Ω—ã."
                preview_text = " ".join(words[:40]) + "..."
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['param_text'] = param_text
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
            keyboard = [
                [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="param_save")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="param_cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            preview_display = f"üìù –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{existing_text if existing_text else '(–ø—É—Å—Ç–æ)'}\n\n‚ûï –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{param_text}\n\nüìã –ò—Ç–æ–≥–æ:\n{preview_text}{warning}"
            
            await update.message.reply_text(
                preview_display + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.",
                reply_markup=reply_markup
            )
            return
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        chat_id, chat = get_active_chat_for_user(telegram_id, context)
        if not chat_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_message(chat_id, "user", user_text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è)
        # –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        messages = db.get_chat_messages(chat_id, limit=config.CONTEXT_WINDOW_SIZE, exclude_media=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_params = db.get_user_parameters(telegram_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è Gemini (—Ç–æ–ª—å–∫–æ role –∏ content)
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥)
        seen_contents = set()
        chat_history = []
        prev_content = None
        for msg in messages:
            content = msg['content']
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if content in seen_contents or content == prev_content:
                continue
            seen_contents.add(content)
            prev_content = content
            chat_history.append({"role": msg['role'], "content": content})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_params:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
            params_text = " ".join([f"{key}: {value}" for key, value in user_params.items()])
            
            if len(chat_history) > 0:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                params_context = f"\n\n[–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {params_text}]"
                chat_history[-1]['content'] = chat_history[-1]['content'] + params_context
            else:
                # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                chat_history.insert(0, {
                    "role": "user",
                    "content": f"[–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {params_text}]"
                })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = await update.message.reply_text("üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API-–∫–ª—é—á–æ–º
        user_handlers = get_handlers_for_user(telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
        response = user_handlers.gemini.chat(chat_history, context_window=config.CONTEXT_WINDOW_SIZE)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        db.add_message(chat_id, "model", response)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await status_msg.delete()
        await safe_send_message(update, response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    telegram_id = update.effective_user.id
    voice = update.message.voice
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        chat_id, chat = get_active_chat_for_user(telegram_id, context)
        if not chat_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = await update.message.reply_text("üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        voice_file = await context.bot.get_file(voice.file_id)
        voice_path = f"temp_{voice.file_id}_{update.message.message_id}.ogg"
        await voice_file.download_to_drive(voice_path)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
            caption = update.message.caption
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –º–µ–¥–∏–∞)
            messages = db.get_chat_messages(chat_id, limit=config.CONTEXT_WINDOW_SIZE, exclude_media=True)
            chat_history = [
                {"role": msg['role'], "content": msg['content']}
                for msg in messages
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            user_handlers = get_handlers_for_user(telegram_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
            response = await user_handlers.handle_voice(voice_path, caption, chat_history)
            
            # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –ë–î - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
            # –ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –≤–ª–∏—è—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await status_msg.delete()
            await safe_send_message(update, response)
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ)
            import os
            try:
                if os.path.exists(voice_path):
                    os.unlink(voice_path)
                    print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {voice_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {voice_path}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    telegram_id = update.effective_user.id
    photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        chat_id, chat = get_active_chat_for_user(telegram_id, context)
        if not chat_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = await update.message.reply_text("üí¨ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await context.bot.get_file(photo.file_id)
        photo_data = await photo_file.download_as_bytearray()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
        caption = update.message.caption
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        user_handlers = get_handlers_for_user(telegram_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        response = await user_handlers.handle_photo(bytes(photo_data), caption)
        
        # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await status_msg.delete()
        await safe_send_message(update, response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}"
        )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, TXT, –∞—É–¥–∏–æ)"""
    telegram_id = update.effective_user.id
    document = update.message.document
    file_name = document.file_name.lower() if document.file_name else ""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        chat_id, chat = get_active_chat_for_user(telegram_id, context)
        if not chat_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = await update.message.reply_text("üí¨ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        if document.file_size and document.file_size > config.MAX_FILE_SIZE:
            await status_msg.delete()
            await update.message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({document.file_size / 1024 / 1024:.1f} –ú–ë). –ú–∞–∫—Å–∏–º—É–º {config.MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë.")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        doc_file = await context.bot.get_file(document.file_id)
        file_path = f"temp_{document.file_id}_{update.message.message_id}_{document.file_name}"
        await doc_file.download_to_drive(file_path)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
            caption = update.message.caption
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            user_handlers = get_handlers_for_user(telegram_id)
            
            response = None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            if file_name.endswith('.pdf'):
                response = await user_handlers.handle_pdf(file_path, caption)
            elif file_name.endswith(('.txt', '.text')):
                response = await user_handlers.handle_text_file(file_path, caption)
            elif file_name.endswith(('.mp3', '.wav', '.ogg', '.m4a', '.flac')):
                response = await user_handlers.handle_audio_file(file_path, caption)
            else:
                response = "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, TXT, –∞—É–¥–∏–æ (MP3, WAV, OGG)."
            
            if response:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                await status_msg.delete()
                try:
                    formatted_response = format_response_for_telegram(response)
                    await update.message.reply_text(formatted_response, parse_mode=ParseMode.HTML)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    await safe_send_message(update, response)
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ)
            import os
            try:
                if os.path.exists(file_path):
                    os.unlink(file_path)
                    print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}", exc_info=context.error)
    
    if update and update.message:
        try:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", model_command))
    application.add_handler(CommandHandler("params", params_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(model_callback, pattern="^model_"))
    application.add_handler(CallbackQueryHandler(params_callback, pattern="^param_"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (–¥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    application.add_handler(MessageHandler(filters.Regex("^(ü§ñ –ú–æ–¥–µ–ª—å|‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã|‚ûï –ù–æ–≤—ã–π —á–∞—Ç|‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ)$"), handle_menu_button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    async def post_init(application: Application):
        await application.bot.set_my_commands([
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"),
            BotCommand("model", "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å AI (Flash/Pro)"),
            BotCommand("params", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è)")
        ])
    
    application.post_init = post_init
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()


def run_flask() -> None:
    """Run lightweight Flask app required by hosting."""
    print("[flask] starting auxiliary web server...")
    app = Flask(__name__)

    @app.route("/")
    def home() -> tuple[str, int]:
        return "Telegram Bot is running (long polling in a separate thread).", 200

    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)


if __name__ == "__main__":
    bot_thread = threading.Thread(target=lambda: asyncio.run(start_bot()), daemon=True)
    bot_thread.start()
    run_flask()
